#!/usr/bin/env python3

import collections
import contextlib
import os
import sys
import daemon

try:
    basestring
except NameError:
    basestring = (bytes, str)

@contextlib.contextmanager
def redirecting(stdin, stdout, stderr=None):
    if stderr is None:
        stderr = stdout
    _stdin, _stdout, _stderr = sys.stdin, sys.stdout, sys.stderr
    try:
        sys.stdin, sys.stdout, sys.stderr = stdin, stdout, stderr
        yield
    finally:
        sys.stdin, sys.stdout, sys.stderr = _stdin, _stdout, _stderr

class EvalDaemon(daemon.Daemon):
    def initialize(self):
        self.env = {'_' : ''}
    def handle(self, cmd, rfile, wfile):
        with redirecting(rfile, wfile):
            try:
                result = eval(cmd, self.env)
                if result is not None:
                    self.env['_'] = result
            except Exception as e:
                result = '{}: {}'.format(type(e).__name__, e)
        wfile.write('{}\n'.format(result))

d = EvalDaemon(os.path.expanduser('~/.pyd.sock'))

if len(sys.argv) < 2:
    if d.kill():
        print('Daemon killed')
    else:
        print('Daemon was not running')
    sys.exit(0)

for line in d.execute(sys.argv[1], sys.stdin):
    sys.stdout.write(line)
