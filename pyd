#!/usr/bin/env python3

import functools
import os
import socket
import sys

path = os.path.expanduser('~/.pyd.sock')

def daemon():
    ssock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    ssock.bind(path)
    ssock.listen(1)
    pid = os.fork()
    if pid:
        print('Started daemon on {}'.format(pid))
        ssock.close()
        sock.connect(path)
    else:
        os.setsid()
        try:
            sock.close()
            sys.stdin.close()
            sys.stdout.close()
            sys.stderr.close()
            while True:
                csock, addr = ssock.accept()
                r, w = csock.makefile('r'), csock.makefile('w')
                expr = r.readline()
                if not expr:
                    break
                sys.stdin = r
                sys.stdout = sys.stderr = w
                try:
                    _ = result = eval(expr)
                except Exception as e:
                    w.write('{}: {}\n'.format(type(e), e))
                else:
                    w.write(str(result) + '\n')
                finally:
                    sys.stdin = sys.stdout = sys.stderr = None
                    r.close()
                    w.close()
                    csock.close()
        finally:
            os.unlink(path)
            ssock.close()
            os._exit(0)

sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

if len(sys.argv) < 2:
    try:
        sock.connect(path)
        sock.close()
        print('Daemon killed')
    except FileNotFoundError:
        print('Daemon was not running')
    sys.exit(0)

try:
    sock.connect(path)
except FileNotFoundError:
    daemon()

try:
    sock.sendall(sys.argv[1].encode('utf-8') + b'\n')
    for line in iter(input, ''):
        sock.sendall(line.encode('utf-8') + b'\n')
    response = sock.recv(4096).decode('utf-8')
    sys.stdout.write(response)
finally:
    sock.close()
